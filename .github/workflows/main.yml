name: Flask Expense Tracker CI/CD

# The workflow will run on every push to the main branch.
on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: minnuantony/expense-tracker

jobs:
  # The 'ci' job handles building, testing, and pushing the Docker image.
  ci:
    name: Continuous Integration
    runs-on: self-hosted

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üêç Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: üì¶ Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install flake8 and pytest for testing and linting
          pip install flake8 pytest

      - name: üßπ Run Linter (Flake8)
        run: flake8 . --count --select=E9,F63,F7,F82,W503 --show-source --statistics

      - name: ‚úÖ Run Unit Tests (Pytest)
        run: |
          # The current directory is the root of your project.
          # Add the project root to the Python path so 'app.py' can be imported.
          export PYTHONPATH=$PYTHONPATH:.
          pytest

      - name: üõ°Ô∏è Security Scan (SCA)
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects --sarif-file-output=snyk.sarif

      - name: üê≥ Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: üõ†Ô∏è Build Docker Image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }} .

      - name: ‚¨ÜÔ∏è Push Docker Image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

  # The 'sast' job runs static analysis in parallel with the main CI job.
  sast:
    name: Static Analysis (CodeQL)
    runs-on: self-hosted
    permissions:
      security-events: write
      contents: read

    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4

      - name: üîé Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: üèÉ Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # The 'cd' job handles the deployment to Kubernetes after CI is successful.
  cd:
    name: Continuous Deployment
    runs-on: ubuntu-latest
    needs: [ci, sast] # Wait for both CI and SAST to complete
    
    steps:
      - name: ‚¨áÔ∏è Checkout Repository
        uses: actions/checkout@v4
        
      - name: üîë Set up Kubeconfig
        run: |
          mkdir -p ~/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 --decode > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: üöÄ Deploy to Kubernetes
        run: |
          # Apply manifests
          kubectl apply -f pvc.yaml
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

          # Update deployment image to latest CI build
          kubectl set image deployment/hack-expense-tracker-deployment \
            expense-tracker-container=${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}

      - name: ‚è±Ô∏è Wait for deployment to be ready
        run: |
          # The service might take some time to be ready and get an external IP.
          # This loop waits until the service is available.
          DEPLOYMENT_NAME="hack-expense-tracker-deployment"
          echo "Waiting for deployment ${DEPLOYMENT_NAME} to be ready..."
          kubectl rollout status deployment/${DEPLOYMENT_NAME} --timeout=5m
      
      - name: üîç Dynamic Application Security Testing (DAST)
        run: |
          # Placeholder for DAST. This step would typically run a DAST scanner
          # like OWASP ZAP or a commercial tool against the deployed application's public URL.
          echo "Placeholder for DAST. This step needs a DAST scanner and the deployed application's public URL."
          echo "Example: `zap-scan -t http://<YOUR_APP_PUBLIC_IP> -f openapi.yaml -r`"
          echo "This step would typically run after a successful deployment to an environment."
