name: Flask Expense Tracker CI/CD

# The workflow will run on every push to the main branch.
on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: minnuantony/expense-tracker

jobs:
  # The 'ci' job handles building, testing, and pushing the Docker image.
  ci:
    name: Continuous Integration
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # Install flake8 and pytest for testing and linting
          pip install flake8 pytest

      - name: Run Linter (Flake8)
        run: flake8 . --count --select=E9,F63,F7,F82,W503 --show-source --statistics

      - name: Run Unit Tests (Pytest)
        run: |
          # The current directory is the root of your project.
          # Add the project root to the Python path so 'app.py' can be imported.
          export PYTHONPATH=$PYTHONPATH:.
          pytest

      # - name: ðŸ›¡ Security Scan (SCA)
      #   uses: snyk/actions/python@master
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      #   with:
      #     args: --all-projects --sarif-file-output=snyk.sarif

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build Docker Image
        run: docker build -t ${{ env.DOCKER_IMAGE_NAME }}:v1 .

      - name: Push Docker Image
        run: docker push ${{ env.DOCKER_IMAGE_NAME }}:v1

  # The 'sast' job runs static analysis in parallel with the main CI job.
  sast:
    name: Static Analysis (CodeQL)
    runs-on: self-hosted
    continue-on-error: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # The 'cd' job handles the deployment to Kubernetes after CI is successful.
  cd:
    name: Continuous Deployment
    runs-on: self-hosted
    needs: [ci, sast] # Wait for both CI and SAST to complete

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to Kubernetes
        run: |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f pv.yaml
          kubectl apply -f pvc.yaml
          kubectl apply -f deployment.yaml
          kubectl apply -f service.yaml

          PVC_STATUS=$(kubectl get pvc expense-db-pvc -o jsonpath='{.status.phase}')
          if [ "$PVC_STATUS" != "Bound" ]; then
            echo "Waiting for PVC to bind..."
            kubectl wait --for=condition=Bound pvc/expense-db-pvc --timeout=180s
          fi

          echo "Updating deployment image..."
          kubectl set image deployment/hack-expense-tracker-deployment \
            expense-tracker=${{ env.DOCKER_IMAGE_NAME }}:v1

          echo "Waiting for deployment rollout..."
          if ! kubectl rollout status deployment/hack-expense-tracker-deployment --timeout=5m; then
            echo "Deployment failed! Showing pod details..."
            kubectl get pods
            kubectl describe pods
            kubectl logs -l app=expense-tracker --all-containers=true --tail=50
            exit 1
          fi

          echo "Waiting for pods to be ready..."
          kubectl wait --for=condition=Ready pod -l app=expense-tracker --timeout=2m

      - name:  Dynamic Application Security Testing (DAST)
        run: |
          # Placeholder for DAST. This step would typically run a DAST scanner
          # like OWASP ZAP or a commercial tool against the deployed application's public URL.
          echo "Placeholder for DAST. This step needs a DAST scanner and the deployed application's public URL."
          echo "Example: `zap-scan -t http://<YOUR_APP_PUBLIC_IP> -f openapi.yaml -r`"
          echo "This step would typically run after a successful deployment to an environment."
